"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mimic-fn";
exports.ids = ["vendor-chunks/mimic-fn"];
exports.modules = {

/***/ "(ssr)/./node_modules/mimic-fn/index.js":
/*!****************************************!*\
  !*** ./node_modules/mimic-fn/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("\nconst copyProperty = (to, from, property, ignoreNonConfigurable)=>{\n    // `Function#length` should reflect the parameters of `to` not `from` since we keep its body.\n    // `Function#prototype` is non-writable and non-configurable so can never be modified.\n    if (property === \"length\" || property === \"prototype\") {\n        return;\n    }\n    // `Function#arguments` and `Function#caller` should not be copied. They were reported to be present in `Reflect.ownKeys` for some devices in React Native (#41), so we explicitly ignore them here.\n    if (property === \"arguments\" || property === \"caller\") {\n        return;\n    }\n    const toDescriptor = Object.getOwnPropertyDescriptor(to, property);\n    const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);\n    if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {\n        return;\n    }\n    Object.defineProperty(to, property, fromDescriptor);\n};\n// `Object.defineProperty()` throws if the property exists, is not configurable and either:\n//  - one its descriptors is changed\n//  - it is non-writable and its value is changed\nconst canCopyProperty = function(toDescriptor, fromDescriptor) {\n    return toDescriptor === undefined || toDescriptor.configurable || toDescriptor.writable === fromDescriptor.writable && toDescriptor.enumerable === fromDescriptor.enumerable && toDescriptor.configurable === fromDescriptor.configurable && (toDescriptor.writable || toDescriptor.value === fromDescriptor.value);\n};\nconst changePrototype = (to, from)=>{\n    const fromPrototype = Object.getPrototypeOf(from);\n    if (fromPrototype === Object.getPrototypeOf(to)) {\n        return;\n    }\n    Object.setPrototypeOf(to, fromPrototype);\n};\nconst wrappedToString = (withName, fromBody)=>`/* Wrapped ${withName}*/\\n${fromBody}`;\nconst toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, \"toString\");\nconst toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, \"name\");\n// We call `from.toString()` early (not lazily) to ensure `from` can be garbage collected.\n// We use `bind()` instead of a closure for the same reason.\n// Calling `from.toString()` early also allows caching it in case `to.toString()` is called several times.\nconst changeToString = (to, from, name)=>{\n    const withName = name === \"\" ? \"\" : `with ${name.trim()}() `;\n    const newToString = wrappedToString.bind(null, withName, from.toString());\n    // Ensure `to.toString.toString` is non-enumerable and has the same `same`\n    Object.defineProperty(newToString, \"name\", toStringName);\n    Object.defineProperty(to, \"toString\", {\n        ...toStringDescriptor,\n        value: newToString\n    });\n};\nconst mimicFn = (to, from, { ignoreNonConfigurable = false } = {})=>{\n    const { name } = to;\n    for (const property of Reflect.ownKeys(from)){\n        copyProperty(to, from, property, ignoreNonConfigurable);\n    }\n    changePrototype(to, from);\n    changeToString(to, from, name);\n    return to;\n};\nmodule.exports = mimicFn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWltaWMtZm4vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxlQUFlLENBQUNDLElBQUlDLE1BQU1DLFVBQVVDO0lBQ3pDLDZGQUE2RjtJQUM3RixzRkFBc0Y7SUFDdEYsSUFBSUQsYUFBYSxZQUFZQSxhQUFhLGFBQWE7UUFDdEQ7SUFDRDtJQUVBLG9NQUFvTTtJQUNwTSxJQUFJQSxhQUFhLGVBQWVBLGFBQWEsVUFBVTtRQUN0RDtJQUNEO0lBRUEsTUFBTUUsZUFBZUMsT0FBT0Msd0JBQXdCLENBQUNOLElBQUlFO0lBQ3pELE1BQU1LLGlCQUFpQkYsT0FBT0Msd0JBQXdCLENBQUNMLE1BQU1DO0lBRTdELElBQUksQ0FBQ00sZ0JBQWdCSixjQUFjRyxtQkFBbUJKLHVCQUF1QjtRQUM1RTtJQUNEO0lBRUFFLE9BQU9JLGNBQWMsQ0FBQ1QsSUFBSUUsVUFBVUs7QUFDckM7QUFFQSwyRkFBMkY7QUFDM0Ysb0NBQW9DO0FBQ3BDLGlEQUFpRDtBQUNqRCxNQUFNQyxrQkFBa0IsU0FBVUosWUFBWSxFQUFFRyxjQUFjO0lBQzdELE9BQU9ILGlCQUFpQk0sYUFBYU4sYUFBYU8sWUFBWSxJQUM3RFAsYUFBYVEsUUFBUSxLQUFLTCxlQUFlSyxRQUFRLElBQ2pEUixhQUFhUyxVQUFVLEtBQUtOLGVBQWVNLFVBQVUsSUFDckRULGFBQWFPLFlBQVksS0FBS0osZUFBZUksWUFBWSxJQUN4RFAsQ0FBQUEsYUFBYVEsUUFBUSxJQUFJUixhQUFhVSxLQUFLLEtBQUtQLGVBQWVPLEtBQUs7QUFFdkU7QUFFQSxNQUFNQyxrQkFBa0IsQ0FBQ2YsSUFBSUM7SUFDNUIsTUFBTWUsZ0JBQWdCWCxPQUFPWSxjQUFjLENBQUNoQjtJQUM1QyxJQUFJZSxrQkFBa0JYLE9BQU9ZLGNBQWMsQ0FBQ2pCLEtBQUs7UUFDaEQ7SUFDRDtJQUVBSyxPQUFPYSxjQUFjLENBQUNsQixJQUFJZ0I7QUFDM0I7QUFFQSxNQUFNRyxrQkFBa0IsQ0FBQ0MsVUFBVUMsV0FBYSxDQUFDLFdBQVcsRUFBRUQsU0FBUyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztBQUV2RixNQUFNQyxxQkFBcUJqQixPQUFPQyx3QkFBd0IsQ0FBQ2lCLFNBQVNDLFNBQVMsRUFBRTtBQUMvRSxNQUFNQyxlQUFlcEIsT0FBT0Msd0JBQXdCLENBQUNpQixTQUFTQyxTQUFTLENBQUNFLFFBQVEsRUFBRTtBQUVsRiwwRkFBMEY7QUFDMUYsNERBQTREO0FBQzVELDBHQUEwRztBQUMxRyxNQUFNQyxpQkFBaUIsQ0FBQzNCLElBQUlDLE1BQU0yQjtJQUNqQyxNQUFNUixXQUFXUSxTQUFTLEtBQUssS0FBSyxDQUFDLEtBQUssRUFBRUEsS0FBS0MsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUM1RCxNQUFNQyxjQUFjWCxnQkFBZ0JZLElBQUksQ0FBQyxNQUFNWCxVQUFVbkIsS0FBS3lCLFFBQVE7SUFDdEUsMEVBQTBFO0lBQzFFckIsT0FBT0ksY0FBYyxDQUFDcUIsYUFBYSxRQUFRTDtJQUMzQ3BCLE9BQU9JLGNBQWMsQ0FBQ1QsSUFBSSxZQUFZO1FBQUMsR0FBR3NCLGtCQUFrQjtRQUFFUixPQUFPZ0I7SUFBVztBQUNqRjtBQUVBLE1BQU1FLFVBQVUsQ0FBQ2hDLElBQUlDLE1BQU0sRUFBQ0Usd0JBQXdCLEtBQUssRUFBQyxHQUFHLENBQUMsQ0FBQztJQUM5RCxNQUFNLEVBQUN5QixJQUFJLEVBQUMsR0FBRzVCO0lBRWYsS0FBSyxNQUFNRSxZQUFZK0IsUUFBUUMsT0FBTyxDQUFDakMsTUFBTztRQUM3Q0YsYUFBYUMsSUFBSUMsTUFBTUMsVUFBVUM7SUFDbEM7SUFFQVksZ0JBQWdCZixJQUFJQztJQUNwQjBCLGVBQWUzQixJQUFJQyxNQUFNMkI7SUFFekIsT0FBTzVCO0FBQ1I7QUFFQW1DLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbnMtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9taW1pYy1mbi9pbmRleC5qcz80NTgyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29weVByb3BlcnR5ID0gKHRvLCBmcm9tLCBwcm9wZXJ0eSwgaWdub3JlTm9uQ29uZmlndXJhYmxlKSA9PiB7XG5cdC8vIGBGdW5jdGlvbiNsZW5ndGhgIHNob3VsZCByZWZsZWN0IHRoZSBwYXJhbWV0ZXJzIG9mIGB0b2Agbm90IGBmcm9tYCBzaW5jZSB3ZSBrZWVwIGl0cyBib2R5LlxuXHQvLyBgRnVuY3Rpb24jcHJvdG90eXBlYCBpcyBub24td3JpdGFibGUgYW5kIG5vbi1jb25maWd1cmFibGUgc28gY2FuIG5ldmVyIGJlIG1vZGlmaWVkLlxuXHRpZiAocHJvcGVydHkgPT09ICdsZW5ndGgnIHx8IHByb3BlcnR5ID09PSAncHJvdG90eXBlJykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIGBGdW5jdGlvbiNhcmd1bWVudHNgIGFuZCBgRnVuY3Rpb24jY2FsbGVyYCBzaG91bGQgbm90IGJlIGNvcGllZC4gVGhleSB3ZXJlIHJlcG9ydGVkIHRvIGJlIHByZXNlbnQgaW4gYFJlZmxlY3Qub3duS2V5c2AgZm9yIHNvbWUgZGV2aWNlcyBpbiBSZWFjdCBOYXRpdmUgKCM0MSksIHNvIHdlIGV4cGxpY2l0bHkgaWdub3JlIHRoZW0gaGVyZS5cblx0aWYgKHByb3BlcnR5ID09PSAnYXJndW1lbnRzJyB8fCBwcm9wZXJ0eSA9PT0gJ2NhbGxlcicpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCB0b0Rlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvLCBwcm9wZXJ0eSk7XG5cdGNvbnN0IGZyb21EZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmcm9tLCBwcm9wZXJ0eSk7XG5cblx0aWYgKCFjYW5Db3B5UHJvcGVydHkodG9EZXNjcmlwdG9yLCBmcm9tRGVzY3JpcHRvcikgJiYgaWdub3JlTm9uQ29uZmlndXJhYmxlKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLCBwcm9wZXJ0eSwgZnJvbURlc2NyaXB0b3IpO1xufTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpYCB0aHJvd3MgaWYgdGhlIHByb3BlcnR5IGV4aXN0cywgaXMgbm90IGNvbmZpZ3VyYWJsZSBhbmQgZWl0aGVyOlxuLy8gIC0gb25lIGl0cyBkZXNjcmlwdG9ycyBpcyBjaGFuZ2VkXG4vLyAgLSBpdCBpcyBub24td3JpdGFibGUgYW5kIGl0cyB2YWx1ZSBpcyBjaGFuZ2VkXG5jb25zdCBjYW5Db3B5UHJvcGVydHkgPSBmdW5jdGlvbiAodG9EZXNjcmlwdG9yLCBmcm9tRGVzY3JpcHRvcikge1xuXHRyZXR1cm4gdG9EZXNjcmlwdG9yID09PSB1bmRlZmluZWQgfHwgdG9EZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSB8fCAoXG5cdFx0dG9EZXNjcmlwdG9yLndyaXRhYmxlID09PSBmcm9tRGVzY3JpcHRvci53cml0YWJsZSAmJlxuXHRcdHRvRGVzY3JpcHRvci5lbnVtZXJhYmxlID09PSBmcm9tRGVzY3JpcHRvci5lbnVtZXJhYmxlICYmXG5cdFx0dG9EZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9PT0gZnJvbURlc2NyaXB0b3IuY29uZmlndXJhYmxlICYmXG5cdFx0KHRvRGVzY3JpcHRvci53cml0YWJsZSB8fCB0b0Rlc2NyaXB0b3IudmFsdWUgPT09IGZyb21EZXNjcmlwdG9yLnZhbHVlKVxuXHQpO1xufTtcblxuY29uc3QgY2hhbmdlUHJvdG90eXBlID0gKHRvLCBmcm9tKSA9PiB7XG5cdGNvbnN0IGZyb21Qcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZnJvbSk7XG5cdGlmIChmcm9tUHJvdG90eXBlID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodG8pKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0T2JqZWN0LnNldFByb3RvdHlwZU9mKHRvLCBmcm9tUHJvdG90eXBlKTtcbn07XG5cbmNvbnN0IHdyYXBwZWRUb1N0cmluZyA9ICh3aXRoTmFtZSwgZnJvbUJvZHkpID0+IGAvKiBXcmFwcGVkICR7d2l0aE5hbWV9Ki9cXG4ke2Zyb21Cb2R5fWA7XG5cbmNvbnN0IHRvU3RyaW5nRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnKTtcbmNvbnN0IHRvU3RyaW5nTmFtZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLCAnbmFtZScpO1xuXG4vLyBXZSBjYWxsIGBmcm9tLnRvU3RyaW5nKClgIGVhcmx5IChub3QgbGF6aWx5KSB0byBlbnN1cmUgYGZyb21gIGNhbiBiZSBnYXJiYWdlIGNvbGxlY3RlZC5cbi8vIFdlIHVzZSBgYmluZCgpYCBpbnN0ZWFkIG9mIGEgY2xvc3VyZSBmb3IgdGhlIHNhbWUgcmVhc29uLlxuLy8gQ2FsbGluZyBgZnJvbS50b1N0cmluZygpYCBlYXJseSBhbHNvIGFsbG93cyBjYWNoaW5nIGl0IGluIGNhc2UgYHRvLnRvU3RyaW5nKClgIGlzIGNhbGxlZCBzZXZlcmFsIHRpbWVzLlxuY29uc3QgY2hhbmdlVG9TdHJpbmcgPSAodG8sIGZyb20sIG5hbWUpID0+IHtcblx0Y29uc3Qgd2l0aE5hbWUgPSBuYW1lID09PSAnJyA/ICcnIDogYHdpdGggJHtuYW1lLnRyaW0oKX0oKSBgO1xuXHRjb25zdCBuZXdUb1N0cmluZyA9IHdyYXBwZWRUb1N0cmluZy5iaW5kKG51bGwsIHdpdGhOYW1lLCBmcm9tLnRvU3RyaW5nKCkpO1xuXHQvLyBFbnN1cmUgYHRvLnRvU3RyaW5nLnRvU3RyaW5nYCBpcyBub24tZW51bWVyYWJsZSBhbmQgaGFzIHRoZSBzYW1lIGBzYW1lYFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3VG9TdHJpbmcsICduYW1lJywgdG9TdHJpbmdOYW1lKTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLCAndG9TdHJpbmcnLCB7Li4udG9TdHJpbmdEZXNjcmlwdG9yLCB2YWx1ZTogbmV3VG9TdHJpbmd9KTtcbn07XG5cbmNvbnN0IG1pbWljRm4gPSAodG8sIGZyb20sIHtpZ25vcmVOb25Db25maWd1cmFibGUgPSBmYWxzZX0gPSB7fSkgPT4ge1xuXHRjb25zdCB7bmFtZX0gPSB0bztcblxuXHRmb3IgKGNvbnN0IHByb3BlcnR5IG9mIFJlZmxlY3Qub3duS2V5cyhmcm9tKSkge1xuXHRcdGNvcHlQcm9wZXJ0eSh0bywgZnJvbSwgcHJvcGVydHksIGlnbm9yZU5vbkNvbmZpZ3VyYWJsZSk7XG5cdH1cblxuXHRjaGFuZ2VQcm90b3R5cGUodG8sIGZyb20pO1xuXHRjaGFuZ2VUb1N0cmluZyh0bywgZnJvbSwgbmFtZSk7XG5cblx0cmV0dXJuIHRvO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtaW1pY0ZuO1xuIl0sIm5hbWVzIjpbImNvcHlQcm9wZXJ0eSIsInRvIiwiZnJvbSIsInByb3BlcnR5IiwiaWdub3JlTm9uQ29uZmlndXJhYmxlIiwidG9EZXNjcmlwdG9yIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZnJvbURlc2NyaXB0b3IiLCJjYW5Db3B5UHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsInVuZGVmaW5lZCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsInZhbHVlIiwiY2hhbmdlUHJvdG90eXBlIiwiZnJvbVByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJ3cmFwcGVkVG9TdHJpbmciLCJ3aXRoTmFtZSIsImZyb21Cb2R5IiwidG9TdHJpbmdEZXNjcmlwdG9yIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJ0b1N0cmluZ05hbWUiLCJ0b1N0cmluZyIsImNoYW5nZVRvU3RyaW5nIiwibmFtZSIsInRyaW0iLCJuZXdUb1N0cmluZyIsImJpbmQiLCJtaW1pY0ZuIiwiUmVmbGVjdCIsIm93bktleXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mimic-fn/index.js\n");

/***/ })

};
;